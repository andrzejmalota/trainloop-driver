version: '3.1'
services:

### SIMULATOR
  
  simulator: 
    image: pkoperek/cloudsimplus-gateway:1.8.2
    environment:
      # sets the number of hosts in the datacenter
      # we assume that every host can hold 2+4+8 CPUs (so 1 vm of each type)
      - DATACENTER_HOSTS_CNT=10
    expose: 
      - "25333"

### SIMULATOR END

### DNNEVO 

  # this service needs to be called postgres - otherwise we would need to change dnnevo code
  postgres:
    image: postgres:10
    environment:
      - POSTGRES_USER=dnnevo
      - POSTGRES_PASSWORD=dnnevo
      - POSTGRES_DB=dnnevo
    volumes:
      - ./ignored/dnnevodb:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  dnnevo:
    #image: registry.gitlab.com/pkoperek/pytorch-dnn-evolution/pytorch-dnnevo:latest
    image: pkoperek/pytorch-dnnevo:8c9de85
    environment:
      - FLASK_DEBUG=0
      - DEBUG=FALSE
    depends_on:
      - postgres
      - queue
    ports:
      - "8080:8080"

  flower:
    image: mher/flower
    command: --port=5555 --broker=pyamqp://queue//
    depends_on:
      - queue
    ports:
      - "5555:5555"

  queue:
    image: rabbitmq:3-management
    hostname: queue
    ports:
      - "5672:5672"
      - "15672:15672"

#  worker:
#    image: registry.gitlab.com/pkoperek/pytorch-dnn-evolution/pytorch-dnnevo:latest
#    environment:
#      - IS_CELERY_WORKER=TRUE
#    command: celery -A torchxui.celery worker --loglevel=DEBUG -n dnnevoworker
#    depends_on:
#      - queue

### DNNEVO END

### AUTONOMOUS MANAGEMENT

  graphite:
    image: "graphiteapp/graphite-statsd"
    restart: always
    ports:
      - 80:80
      - 2003:2003
      - 2004:2004
      - 2023:2023
      - 2024:2024
      - 8125:8125/udp
      - 8126:8126
    volumes:
      - ./storage-schemas.conf:/opt/graphite/conf/storage-schemas.conf
    # user/pass: root/gr4ph1t3PwdS3cr3t
    # secured using instructions: https://hub.docker.com/r/graphiteapp/docker-graphite-statsd

  grafana:
    image: "grafana/grafana"
    restart: always
    ports:
      - 3000:3000
    # user - admin
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=gfS3cr3tPwd1
      - GF_SERVER_ROOT_URL=http://172.31.55.135:3000
    depends_on:
      - graphite

  samm:
    image: pkoperek/samm:3.3.2
    environment:
      - REMOTE_AGENT_ENABLED=True
      - SAMM_DB_HOSTNAME=sammdb
      - SAMM_DB_PASSWORD=samm
      - REMOTE_AGENT_URL=http://oracle:8080/oracle
      - LOG_REMOTE_AGENT_INPUT_AS_CSV=True
      - AWS_EC2_EXECUTOR=True
        #- AWS_EC2_EXECUTOR=True
      - AUTOSCALING_GROUP_S=dnnevo-small
      - AUTOSCALING_GROUP_M=dnnevo-medium
      - AUTOSCALING_GROUP_L=dnnevo-large
        # grace period needs to be less than 60s because: the CPU-load based autoscaler has been running 3 actions every 180s period of time (every autoscaling pool is independent)
        # so to even out the chances, SAMM needs to be able to run 3 actions within that period too; SAMM is checking metrics on the cluster by default every 60s and this is when it 
        # can execute an action -> ergo to reach 3 actions per 180s it needs to run an action every time it checks the metrics
      - GRACE_PERIOD=50000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
      - MAX_FLEET_SIZE=10
    ports:
      - "5005:5005"
      - "8081:8080"
    volumes:
      - ./samm_logs:/opt/docker/logs
      - /home/ec2-user/.aws:/root/.aws
    depends_on:
      - sammdb
      - oracle

  sammdb:
    image: postgres:11
    ports:
      - 6543:5432
    volumes:
      - ./ignored/sammdb:/storage
        # - ./initdb:/docker-entrypoint-initdb.d
    environment:
      - PGDATA=/storage
      - POSTGRES_USER=samm
      - POSTGRES_PASSWORD=samm
      - POSTGRES_DB=samm

  policytrainer:
    image: pkoperek/trainloop-driver:1.3.4
    environment:
      - CLOUDSIM_GATEWAY_HOST=simulator
      - CLOUDSIM_GATEWAY_PORT=25333
      - MONITORING_DB_USERNAME=samm
      - MONITORING_DB_PASSWORD=samm
      - MONITORING_DB_HOST=sammdb
      - MONITORING_DB_NAME=samm
      - DNNEVO_DB_HOST=postgres
    command: ["trainloop", 
              "--env", "ThreeSizeAppEnv-v0", 
              "--simulator_speedup", "60", 
              "--save_path", "/output_models", 
              "--mips_per_core", "3600", 
              "--seed", "1",
              "--mips_per_core", "4400",
              "--log_path", "/logs",
              "--vf_coef", "0.0005",
              "--lam", "0.97",
              "--gamma", "0.99",
              "--cliprange", "0.2",
              "--num_timesteps", "25000",    # 2x nsteps
              "--nsteps", "250",
              "--lr", "0.0003",
              "--network", "lstm",
              "--iteration_length_s", "1800",
              "--initial_model", "/initial_policy/small_policy.bin",
              "--nminibatches", "1",
              "--continuous_mode"]
#              "--initial_timestamp", "0",
    depends_on:
      - simulator
      - sammdb
      - postgres
      - oracle
      - dnnevo
      - samm
    volumes:
      - "./output_models:/output_models"
      - "./policytrainer_logs:/logs"
      - "./initial_policy:/initial_policy"

### AUTONOMOUS MANAGEMENT END

### ORACLE

  oracle:
    image: pkoperek/baselinesme:2021-01-02
    environment:
      - POLICY_STORAGE_DIRECTORY=/srv/new_policies
      - INITIAL_POLICY_PATH=/srv/initial_policy/small_policy.bin
      - INITIAL_NETWORK_TYPE=lstm
    volumes:
      - ./initial_policy:/srv/initial_policy
      - ./oracle_policies:/srv/new_policies
    ports:
      - 8082:8080

### ORACLE END
